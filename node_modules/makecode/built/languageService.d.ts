/// <reference types="node" />
import * as vm from "vm";
import * as mkc from "makecode-core/built/mkc";
import { WebConfig } from "makecode-core/built/downloader";
import { BuiltSimJsInfo, CompileOptions, CompileResult } from "makecode-core/built/service";
import { LanguageService, SimpleDriverCallbacks } from "makecode-core/built/host";
export declare class NodeLanguageService implements LanguageService {
    editor: mkc.DownloadedEditor;
    sandbox: vm.Context;
    constructor(editor: mkc.DownloadedEditor);
    registerDriverCallbacksAsync(callbacks: SimpleDriverCallbacks): Promise<void>;
    setWebConfigAsync(config: WebConfig): Promise<void>;
    getWebConfigAsync(): Promise<mkc.downloader.WebConfig>;
    getAppTargetAsync(): Promise<any>;
    getTargetConfigAsync(): Promise<any>;
    supportsGhPackagesAsync(): Promise<boolean>;
    setHwVariantAsync(variant: string): Promise<void>;
    getHardwareVariantsAsync(): Promise<pxt.PackageConfig[]>;
    getBundledPackageConfigsAsync(): Promise<pxt.PackageConfig[]>;
    getCompileOptionsAsync(prj: mkc.Package, simpleOpts?: any): Promise<CompileOptions>;
    installGhPackagesAsync(projectFiles: pxt.Map<string>): Promise<pxt.Map<string>>;
    performOperationAsync(op: string, data: any): Promise<any>;
    setProjectTextAsync(projectFiles: pxt.Map<string>): Promise<void>;
    enableExperimentalHardwareAsync(): Promise<void>;
    enableDebugAsync(): Promise<void>;
    setCompileSwitchesAsync(flags: string): Promise<void>;
    buildSimJsInfoAsync(result: CompileResult): Promise<BuiltSimJsInfo>;
    private runScript;
    private runWithCb;
    private runAsync;
    private runSync;
    private runFunctionSync;
    private runFunctionAsync;
    private runFunctionCore;
}
