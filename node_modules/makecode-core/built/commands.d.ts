import * as mkc from "./mkc";
interface Options {
    colors?: boolean;
    noColors?: boolean;
    debug?: boolean;
    compileFlags?: string;
}
export interface ProjectOptions extends Options {
    configPath?: string;
    update?: boolean;
    pxtModules?: boolean;
    linkPxtModules?: boolean;
    symlinkPxtModules?: boolean;
}
export declare function applyGlobalOptions(opts: Options): void;
interface DownloadOptions extends Options {
}
export declare function downloadCommand(URL: string, opts: DownloadOptions): Promise<void>;
interface CleanOptions extends Options {
}
export declare function cleanCommand(opts: CleanOptions): Promise<void>;
export declare function clearProjectCache(): Promise<void>;
export declare function resolveProject(opts: ProjectOptions, quiet?: boolean): Promise<mkc.Project>;
export interface BuildOptions extends ProjectOptions {
    hw?: string;
    native?: boolean;
    javaScript?: boolean;
    buildSimJsInfo?: boolean;
    deploy?: boolean;
    alwaysBuilt?: boolean;
    monoRepo?: boolean;
    watch?: boolean;
    emitBreakpoints?: boolean;
}
export declare function buildCommandOnce(opts: BuildOptions): Promise<mkc.service.CompileResult>;
interface InstallOptions extends ProjectOptions {
    monoRepo?: boolean;
}
export declare function installCommand(opts: InstallOptions): Promise<void>;
interface InitOptions extends ProjectOptions {
    vscodeProject?: boolean;
    gitIgnore?: boolean;
    importUrl?: string;
}
export declare function initCommand(template: string, deps: string[], opts: InitOptions): Promise<void>;
export declare function listHardwareVariantsAsync(opts: ProjectOptions): Promise<pxt.PackageConfig[]>;
export declare function getAppTargetAsync(opts: ProjectOptions): Promise<any>;
export declare function getTargetConfigAsync(opts: ProjectOptions): Promise<any>;
interface SearchOptions extends ProjectOptions {
}
export declare function searchCommand(query: string, opts: SearchOptions): Promise<void>;
export declare function stackCommand(opts: ProjectOptions): Promise<void>;
interface AddOptions extends ProjectOptions {
}
export declare function addCommand(pkg: string, name: string, opts: AddOptions): Promise<void>;
export declare function shareCommand(opts: ProjectOptions): Promise<void>;
export declare function getSimHTML(opts: ProjectOptions): Promise<string>;
export declare function getAssetEditorHTML(opts: ProjectOptions): Promise<string>;
export {};
